#include <iostream>
#include <fstream>
#include <vector>
#include <iomanip>
using namespace std;

// BankAccount Class
class BankAccount {
public:
    int accountNumber;
    string name;
    double balance;

    BankAccount() : accountNumber(0), balance(0.0) {}
    BankAccount(int accNo, string accName, double accBalance) {
        accountNumber = accNo;
        name = accName;
        balance = accBalance;
    }

    void displayAccount() const {
        cout << "----------------------------------\n";
        cout << "Account Number: " << accountNumber << endl;
        cout << "Account Holder: " << name << endl;
        cout << "Balance: $" << fixed << setprecision(2) << balance << endl;
        cout << "----------------------------------\n";
    }
};

// Function to add a new account
void createAccount() {
    int accNo;
    string name;
    double balance;

    cout << "Enter Account Number: ";
    cin >> accNo;
    cout << "Enter Account Holder Name: ";
    cin.ignore();
    getline(cin, name);
    cout << "Enter Initial Balance: ";
    cin >> balance;

    BankAccount acc(accNo, name, balance);
    ofstream outFile("accounts.dat", ios::binary | ios::app);
    outFile.write(reinterpret_cast<char*>(&acc), sizeof(BankAccount));
    outFile.close();

    cout << "Account Created Successfully!\n";
}

// Function to display all accounts
void displayAllAccounts() {
    ifstream inFile("accounts.dat", ios::binary);
    if (!inFile) {
        cout << "No accounts found.\n";
        return;
    }

    BankAccount acc;
    cout << "\n------ Account List ------\n";
    while (inFile.read(reinterpret_cast<char*>(&acc), sizeof(BankAccount))) {
        acc.displayAccount();
    }
    inFile.close();
}

// Function to deposit money
void depositMoney() {
    int accNo;
    double amount;
    bool found = false;

    cout << "Enter Account Number: ";
    cin >> accNo;

    fstream file("accounts.dat", ios::binary | ios::in | ios::out);
    BankAccount acc;
    while (file.read(reinterpret_cast<char*>(&acc), sizeof(BankAccount))) {
        if (acc.accountNumber == accNo) {
            cout << "Current Balance: $" << acc.balance << endl;
            cout << "Enter Amount to Deposit: ";
            cin >> amount;
            acc.balance += amount;

            int pos = -1 * static_cast<int>(sizeof(BankAccount));
            file.seekp(pos, ios::cur);
            file.write(reinterpret_cast<char*>(&acc), sizeof(BankAccount));

            cout << "Amount Deposited Successfully!\n";
            found = true;
            break;
        }
    }

    if (!found) {
        cout << "Account not found.\n";
    }

    file.close();
}

// Function to withdraw money
void withdrawMoney() {
    int accNo;
    double amount;
    bool found = false;

    cout << "Enter Account Number: ";
    cin >> accNo;

    fstream file("accounts.dat", ios::binary | ios::in | ios::out);
    BankAccount acc;
    while (file.read(reinterpret_cast<char*>(&acc), sizeof(BankAccount))) {
        if (acc.accountNumber == accNo) {
            cout << "Current Balance: $" << acc.balance << endl;
            cout << "Enter Amount to Withdraw: ";
            cin >> amount;

            if (amount > acc.balance) {
                cout << "Insufficient Balance!\n";
            } else {
                acc.balance -= amount;

                int pos = -1 * static_cast<int>(sizeof(BankAccount));
                file.seekp(pos, ios::cur);
                file.write(reinterpret_cast<char*>(&acc), sizeof(BankAccount));

                cout << "Withdrawal Successful!\n";
            }
            found = true;
            break;
        }
    }

    if (!found) {
        cout << "Account not found.\n";
    }

    file.close();
}

// Function to check balance
void checkBalance() {
    int accNo;
    bool found = false;

    cout << "Enter Account Number: ";
    cin >> accNo;

    ifstream inFile("accounts.dat", ios::binary);
    BankAccount acc;
    while (inFile.read(reinterpret_cast<char*>(&acc), sizeof(BankAccount))) {
        if (acc.accountNumber == accNo) {
            acc.displayAccount();
            found = true;
            break;
        }
    }

    if (!found) {
        cout << "Account not found.\n";
    }

    inFile.close();
}

// Main menu
void menu() {
    int choice;
    do {
        cout << "\n===== Banking System Menu =====\n";
        cout << "1. Create Account\n";
        cout << "2. Display All Accounts\n";
        cout << "3. Deposit Money\n";
        cout << "4. Withdraw Money\n";
        cout << "5. Check Balance\n";
        cout << "6. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1: createAccount(); break;
            case 2: displayAllAccounts(); break;
            case 3: depositMoney(); break;
            case 4: withdrawMoney(); break;
            case 5: checkBalance(); break;
            case 6: cout << "Exiting...\n"; break;
            default: cout << "Invalid choice. Try again.\n";
        }
    } while (choice != 6);
}

int main() {
    menu();
    return 0;
}
